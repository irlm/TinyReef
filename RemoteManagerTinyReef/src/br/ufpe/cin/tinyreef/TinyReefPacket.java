/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'TinyReefPacket'
 * message type.
 */

package br.ufpe.cin.tinyreef;

public class TinyReefPacket extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 27;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = -1;

    /** Create a new TinyReefPacket of size 27. */
    public TinyReefPacket() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new TinyReefPacket of the given data_length. */
    public TinyReefPacket(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new TinyReefPacket with the given data_length
     * and base offset.
     */
    public TinyReefPacket(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new TinyReefPacket using the given byte array
     * as backing store.
     */
    public TinyReefPacket(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new TinyReefPacket using the given byte array
     * as backing store, with the given base offset.
     */
    public TinyReefPacket(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new TinyReefPacket using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public TinyReefPacket(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new TinyReefPacket embedded in the given message
     * at the given base offset.
     */
    public TinyReefPacket(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new TinyReefPacket embedded in the given message
     * at the given base offset and length.
     */
    public TinyReefPacket(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <TinyReefPacket> \n";
      try {
        s += "  [head.version=0x"+Long.toHexString(get_head_version())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [head.packet_number=0x"+Long.toHexString(get_head_packet_number())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [head.total_packet=0x"+Long.toHexString(get_head_total_packet())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [head.length=0x"+Long.toHexString(get_head_length())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [data=";
        for (int i = 0; i < 23; i++) {
          s += "0x"+Long.toHexString(getElement_data(i) & 0xff)+" ";
        }
        s += "]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: head.version
    //   Field type: short, unsigned
    //   Offset (bits): 0
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'head.version' is signed (false).
     */
    public static boolean isSigned_head_version() {
        return false;
    }

    /**
     * Return whether the field 'head.version' is an array (false).
     */
    public static boolean isArray_head_version() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'head.version'
     */
    public static int offset_head_version() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'head.version'
     */
    public static int offsetBits_head_version() {
        return 0;
    }

    /**
     * Return the value (as a short) of the field 'head.version'
     */
    public short get_head_version() {
        return (short)getUIntBEElement(offsetBits_head_version(), 8);
    }

    /**
     * Set the value of the field 'head.version'
     */
    public void set_head_version(short value) {
        setUIntBEElement(offsetBits_head_version(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'head.version'
     */
    public static int size_head_version() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'head.version'
     */
    public static int sizeBits_head_version() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: head.packet_number
    //   Field type: short, unsigned
    //   Offset (bits): 8
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'head.packet_number' is signed (false).
     */
    public static boolean isSigned_head_packet_number() {
        return false;
    }

    /**
     * Return whether the field 'head.packet_number' is an array (false).
     */
    public static boolean isArray_head_packet_number() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'head.packet_number'
     */
    public static int offset_head_packet_number() {
        return (8 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'head.packet_number'
     */
    public static int offsetBits_head_packet_number() {
        return 8;
    }

    /**
     * Return the value (as a short) of the field 'head.packet_number'
     */
    public short get_head_packet_number() {
        return (short)getUIntBEElement(offsetBits_head_packet_number(), 8);
    }

    /**
     * Set the value of the field 'head.packet_number'
     */
    public void set_head_packet_number(short value) {
        setUIntBEElement(offsetBits_head_packet_number(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'head.packet_number'
     */
    public static int size_head_packet_number() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'head.packet_number'
     */
    public static int sizeBits_head_packet_number() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: head.total_packet
    //   Field type: short, unsigned
    //   Offset (bits): 16
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'head.total_packet' is signed (false).
     */
    public static boolean isSigned_head_total_packet() {
        return false;
    }

    /**
     * Return whether the field 'head.total_packet' is an array (false).
     */
    public static boolean isArray_head_total_packet() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'head.total_packet'
     */
    public static int offset_head_total_packet() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'head.total_packet'
     */
    public static int offsetBits_head_total_packet() {
        return 16;
    }

    /**
     * Return the value (as a short) of the field 'head.total_packet'
     */
    public short get_head_total_packet() {
        return (short)getUIntBEElement(offsetBits_head_total_packet(), 8);
    }

    /**
     * Set the value of the field 'head.total_packet'
     */
    public void set_head_total_packet(short value) {
        setUIntBEElement(offsetBits_head_total_packet(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'head.total_packet'
     */
    public static int size_head_total_packet() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'head.total_packet'
     */
    public static int sizeBits_head_total_packet() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: head.length
    //   Field type: short, unsigned
    //   Offset (bits): 24
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'head.length' is signed (false).
     */
    public static boolean isSigned_head_length() {
        return false;
    }

    /**
     * Return whether the field 'head.length' is an array (false).
     */
    public static boolean isArray_head_length() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'head.length'
     */
    public static int offset_head_length() {
        return (24 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'head.length'
     */
    public static int offsetBits_head_length() {
        return 24;
    }

    /**
     * Return the value (as a short) of the field 'head.length'
     */
    public short get_head_length() {
        return (short)getUIntBEElement(offsetBits_head_length(), 8);
    }

    /**
     * Set the value of the field 'head.length'
     */
    public void set_head_length(short value) {
        setUIntBEElement(offsetBits_head_length(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'head.length'
     */
    public static int size_head_length() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'head.length'
     */
    public static int sizeBits_head_length() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: data
    //   Field type: short[], unsigned
    //   Offset (bits): 32
    //   Size of each element (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'data' is signed (false).
     */
    public static boolean isSigned_data() {
        return false;
    }

    /**
     * Return whether the field 'data' is an array (true).
     */
    public static boolean isArray_data() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'data'
     */
    public static int offset_data(int index1) {
        int offset = 32;
        if (index1 < 0 || index1 >= 23) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 8;
        return (offset / 8);
    }

    /**
     * Return the offset (in bits) of the field 'data'
     */
    public static int offsetBits_data(int index1) {
        int offset = 32;
        if (index1 < 0 || index1 >= 23) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 8;
        return offset;
    }

    /**
     * Return the entire array 'data' as a short[]
     */
    public short[] get_data() {
        short[] tmp = new short[23];
        for (int index0 = 0; index0 < numElements_data(0); index0++) {
            tmp[index0] = getElement_data(index0);
        }
        return tmp;
    }

    /**
     * Set the contents of the array 'data' from the given short[]
     */
    public void set_data(short[] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
            setElement_data(index0, value[index0]);
        }
    }

    /**
     * Return an element (as a short) of the array 'data'
     */
    public short getElement_data(int index1) {
        return (short)getUIntBEElement(offsetBits_data(index1), 8);
    }

    /**
     * Set an element of the array 'data'
     */
    public void setElement_data(int index1, short value) {
        setUIntBEElement(offsetBits_data(index1), 8, value);
    }

    /**
     * Return the total size, in bytes, of the array 'data'
     */
    public static int totalSize_data() {
        return (184 / 8);
    }

    /**
     * Return the total size, in bits, of the array 'data'
     */
    public static int totalSizeBits_data() {
        return 184;
    }

    /**
     * Return the size, in bytes, of each element of the array 'data'
     */
    public static int elementSize_data() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of each element of the array 'data'
     */
    public static int elementSizeBits_data() {
        return 8;
    }

    /**
     * Return the number of dimensions in the array 'data'
     */
    public static int numDimensions_data() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'data'
     */
    public static int numElements_data() {
        return 23;
    }

    /**
     * Return the number of elements in the array 'data'
     * for the given dimension.
     */
    public static int numElements_data(int dimension) {
      int array_dims[] = { 23,  };
        if (dimension < 0 || dimension >= 1) throw new ArrayIndexOutOfBoundsException();
        if (array_dims[dimension] == 0) throw new IllegalArgumentException("Array dimension "+dimension+" has unknown size");
        return array_dims[dimension];
    }

    /**
     * Fill in the array 'data' with a String
     */
    public void setString_data(String s) { 
         int len = s.length();
         int i;
         for (i = 0; i < len; i++) {
             setElement_data(i, (short)s.charAt(i));
         }
         setElement_data(i, (short)0); //null terminate
    }

    /**
     * Read the array 'data' as a String
     */
    public String getString_data() { 
         char carr[] = new char[Math.min(net.tinyos.message.Message.MAX_CONVERTED_STRING_LENGTH,23)];
         int i;
         for (i = 0; i < carr.length; i++) {
             if ((char)getElement_data(i) == (char)0) break;
             carr[i] = (char)getElement_data(i);
         }
         return new String(carr,0,i);
    }

}
